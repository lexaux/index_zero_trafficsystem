@startuml

partition "OpenStreetMap XML Loader" {
(*)--> [Run-time]User selects one of the data files either pre-packaged with the app or loaded from the file system.
--> [Parser constructed] SAX parser over provided input stream is created. It uses custom SAX handler. Actual XML parsing starts
--> [Reading bounding box] Bounding box is first read from file, which gives us geographical window all other objects will belong to
--> [GeoToMeters init] Conversion function initialized with bounding box.From now and on, all the coordinates can be converted to meteres_offset system
--> [Loading nodes] Nodes are read then. Each node is a point with lat/lon coordinates.points are stored by ID, with coordinates\n converted to meters offset system
--> [Loading ways] Ways in OSM are seequences of nodes. When the ways are loaded, two processes happen:\n\n1. RoadDescription objects are stored. They have name, sequence of nodes (polyline) and meta info (number of \nlanes, if the road is one-way.\n\n2.Each node is recorded as belonging to a path. This is needed to detect junctions even if they are not marked.
--> [create Junc. Descr.] From previously stored nodes, we find ones which belong\nto more than one road. We create JunctionDescription \nobjects, and record IDs of connected features either as \nincoming or outgoing. In case the road has possible \njunction in the middle of its polyline, such road is split.
--> [Result object] ParseResult object is created which contains collections of \nJunctionDescription, collection of RoadDescription and a \nbounding box of meters. \nBeyond this point, no lat/long coordinates are used at all.
}
--> [Resulting descriptor set is passed to graph constructor](*)
@enduml