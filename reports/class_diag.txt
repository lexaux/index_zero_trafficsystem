@startuml

package "Logger" #FFFFFF {

	Logger --|> Logger_Interface
	Log_Levels <-- Logger
	Log_TimeStamp <-- Logger
	Log_Engine <-- Logger
	Log_Config <-- Log_Engine
	
	interface Logger_Interface <<interface>> {
		{abstract} log( objects : Object... )
		{abstract} log_Fatal( objects : Object... )
		{abstract} log_Error( objects : Object... )
		{abstract} log_Warning( objects : Object... )
		{abstract} log_Debug( objects : Object... )
		{abstract} log_Trace( objects : Object... )
	}

	class Logger {
		-String calling_instance_name
		-Log_Engine log_engine
		-{static} Map<String, Logger> loggers
		-Logger( instance_name : String )
		+{static} getLoggerInstance( instance_name : String ) : Logger
		+log( objects : Object... )
		+log_Fatal( objects : Object... )
		+log_Error( objects : Object... )
		+log_Warning( objects : Object... )
		+log_Debug( objects : Object... )
		+log_Trace( objects : Object... )
	}

	class Log_Engine {
		-{static} Log_Engine INSTANCE
		-Log_Config global_log_config
		-Long session_msg_number
		-Log_Engine()
		+{static} getInstance() : Log_Engine
		#processLogMsg( time_stamp : Log_TimeStamp, level : int, class_origin : String, objects : Object... )
	}

	class Log_Config {
		-String global_file_name
		-int global_log_level
		-Vector<Output> outputs
		#Log_Config()
		+getFileName() : String
		+getGlobalLogLevel : int
		#getOutputs() : Vector<Output>
		-setGlobalLogLevel( level : int )
	}

	class Log_Levels <<static>> {
		+{static} int OFF
		+{static} int FATAL
		+{static} int ERROR
		+{static} int WARNING
		+{static} int MSG
		+{static} int DEBUG
		+{static} int TRACE
		+{static} String[] txtLevels
		+{static} String[] csvLevels
	}

	class Log_TimeStamp {
		-LocalDateTime now
		+Log_TimeStamp()
		+Log_TimeStamp( now : LocalDateTime )
		+getDate() : String
		+getTime() : String
		+getCustomStamp( formatter : String ) : String
	}

	package "Logger.Ouputs" #DDDDDD {
		interface Formatter_Interface <<interface>> {
			format( origin_name : String, log_level : int, log_number : Long, time_stamp : Log_TimeStamp, objects : Object... ) : String
		}

		class Formatter_TERM {
			#Formatter_TERM()
			+format( origin_name String, log_level : int, log_number : Long, time_stamp : Log_TimeStamp, objects : Object... ) : String
		}

		class Formatter_TXT {
			#Formatter_TXT()
			+format( origin_name String, log_level : int, log_number : Long, time_stamp : Log_TimeStamp, objects : Object... ) : String
		}

		class Formatter_CSV {
			#Formatter_CSV()
			+format( origin_name String, log_level : int, log_number : Long, time_stamp : Log_TimeStamp, objects : Object... ) : String
		}

		class Output {
			-String output_name
			-GlobalOutputTypes output_type
			#Ouput( output_name : String, output_type : GlobalOutputTypes )
			+setName( output_name : String )
			+getOutputName() : String
			+getOutputType() : GlobalOutputTypes
			+output( origin_name : String, log_level : int, log_number : Long, time_stamp Log_TimeStamp, objects : Object... )
		}

		class Output_TERM {
			-Formatter_TERM formatter
			+Output_TERM( name : String )
			+setName( output_name : String )
			+getOutputName() : String
			+getOutputType() : GlobalOutputTypes
			+output( origin_name : String, log_level : int, log_number : Long, time_stamp Log_TimeStamp, objects : Object... )
		}

		class Output_TXT {
			-Formatter_TXT formatter
			+Output_TXT( name : String )
			+setName( output_name : String )
			+getOutputName() : String
			+getOutputType() : GlobalOutputTypes
			+output( origin_name : String, log_level : int, log_number : Long, time_stamp Log_TimeStamp, objects : Object... )
		}

		class Output_CSV {
			-Formatter_CSV formatter
			+Output_CSV( name : String )
			+setName( output_name : String )
			+getOutputName() : String
			+getOutputType() : GlobalOutputTypes
			+output( origin_name : String, log_level : int, log_number : Long, time_stamp Log_TimeStamp, objects : Object... )
		}
		
		enum GlobalOutputTypes <<enum>> {
			TERMINAL
			TXT
			CSV
		}

		Formatter_TERM --|> Formatter_Interface
		Formatter_TXT --|> Formatter_Interface
		Formatter_CSV --|> Formatter_Interface
		Log_TimeStamp <-- Formatter_TERM
		Log_TimeStamp <-- Formatter_TXT
		Log_TimeStamp <-- Formatter_CSV
		GlobalOutputTypes <-- Output
		Output <-- Log_Engine
		Output <|-- Output_TERM
		Output <|-- Output_TXT
		Output <|-- Output_CSV
		Output <-- Log_Levels
		Output_TERM --> Formatter_TERM
		Output_TXT --> Formatter_TXT
		Output_CSV --> Formatter_CSV
	}
	
	package "kcl.teamIndexZero.traffic.log.FileIO" #DDDDDD {
		class FileIO {
			+FileIO( file_name : String )
		}
	}
}

@enduml